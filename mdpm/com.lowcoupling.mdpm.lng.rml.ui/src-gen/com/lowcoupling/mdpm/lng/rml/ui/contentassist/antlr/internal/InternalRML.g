/*
* generated by Xtext
*/
grammar InternalRML;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package com.lowcoupling.mdpm.lng.rml.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.lowcoupling.mdpm.lng.rml.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.lowcoupling.mdpm.lng.rml.services.RMLGrammarAccess;

}

@parser::members {
 
 	private RMLGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(RMLGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getPackagesAssignment()); }
(rule__Model__PackagesAssignment)*
{ after(grammarAccess.getModelAccess().getPackagesAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleREQPackage
entryRuleREQPackage 
:
{ before(grammarAccess.getREQPackageRule()); }
	 ruleREQPackage
{ after(grammarAccess.getREQPackageRule()); } 
	 EOF 
;

// Rule REQPackage
ruleREQPackage
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getREQPackageAccess().getGroup()); }
(rule__REQPackage__Group__0)
{ after(grammarAccess.getREQPackageAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleREQRequirement
entryRuleREQRequirement 
:
{ before(grammarAccess.getREQRequirementRule()); }
	 ruleREQRequirement
{ after(grammarAccess.getREQRequirementRule()); } 
	 EOF 
;

// Rule REQRequirement
ruleREQRequirement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getREQRequirementAccess().getGroup()); }
(rule__REQRequirement__Group__0)
{ after(grammarAccess.getREQRequirementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__REQPackage__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__REQPackage__Group__0__Impl
	rule__REQPackage__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__REQPackage__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREQPackageAccess().getPackageKeyword_0()); }

	'package' 

{ after(grammarAccess.getREQPackageAccess().getPackageKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__REQPackage__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__REQPackage__Group__1__Impl
	rule__REQPackage__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__REQPackage__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREQPackageAccess().getNameAssignment_1()); }
(rule__REQPackage__NameAssignment_1)
{ after(grammarAccess.getREQPackageAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__REQPackage__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__REQPackage__Group__2__Impl
	rule__REQPackage__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__REQPackage__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREQPackageAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getREQPackageAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__REQPackage__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__REQPackage__Group__3__Impl
	rule__REQPackage__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__REQPackage__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREQPackageAccess().getPackageAssignment_3()); }
(rule__REQPackage__PackageAssignment_3)?
{ after(grammarAccess.getREQPackageAccess().getPackageAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__REQPackage__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__REQPackage__Group__4__Impl
	rule__REQPackage__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__REQPackage__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREQPackageAccess().getRequirementsAssignment_4()); }
(rule__REQPackage__RequirementsAssignment_4)*
{ after(grammarAccess.getREQPackageAccess().getRequirementsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__REQPackage__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__REQPackage__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__REQPackage__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREQPackageAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getREQPackageAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__REQRequirement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__REQRequirement__Group__0__Impl
	rule__REQRequirement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__REQRequirement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREQRequirementAccess().getReqKeyword_0()); }

	'req' 

{ after(grammarAccess.getREQRequirementAccess().getReqKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__REQRequirement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__REQRequirement__Group__1__Impl
	rule__REQRequirement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__REQRequirement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREQRequirementAccess().getNameAssignment_1()); }
(rule__REQRequirement__NameAssignment_1)
{ after(grammarAccess.getREQRequirementAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__REQRequirement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__REQRequirement__Group__2__Impl
	rule__REQRequirement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__REQRequirement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREQRequirementAccess().getTextAssignment_2()); }
(rule__REQRequirement__TextAssignment_2)
{ after(grammarAccess.getREQRequirementAccess().getTextAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__REQRequirement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__REQRequirement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__REQRequirement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREQRequirementAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getREQRequirementAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__Model__PackagesAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getPackagesREQPackageParserRuleCall_0()); }
	ruleREQPackage{ after(grammarAccess.getModelAccess().getPackagesREQPackageParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__REQPackage__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREQPackageAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getREQPackageAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__REQPackage__PackageAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREQPackageAccess().getPackageREQPackageParserRuleCall_3_0()); }
	ruleREQPackage{ after(grammarAccess.getREQPackageAccess().getPackageREQPackageParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__REQPackage__RequirementsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREQPackageAccess().getRequirementsREQRequirementParserRuleCall_4_0()); }
	ruleREQRequirement{ after(grammarAccess.getREQPackageAccess().getRequirementsREQRequirementParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__REQRequirement__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREQRequirementAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getREQRequirementAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__REQRequirement__TextAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREQRequirementAccess().getTextSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getREQRequirementAccess().getTextSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


