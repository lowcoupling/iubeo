/*
* generated by Xtext
*/
package com.lowcoupling.mdpm.lng.rml.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class RMLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cPackagesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPackagesREQPackageParserRuleCall_0 = (RuleCall)cPackagesAssignment.eContents().get(0);
		
		//Model:
		//	packages+=REQPackage*;
		public ParserRule getRule() { return rule; }

		//packages+=REQPackage*
		public Assignment getPackagesAssignment() { return cPackagesAssignment; }

		//REQPackage
		public RuleCall getPackagesREQPackageParserRuleCall_0() { return cPackagesREQPackageParserRuleCall_0; }
	}

	public class REQPackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "REQPackage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPackageAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPackageREQPackageParserRuleCall_3_0 = (RuleCall)cPackageAssignment_3.eContents().get(0);
		private final Assignment cRequirementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRequirementsREQRequirementParserRuleCall_4_0 = (RuleCall)cRequirementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//REQPackage:
		//	"package" name=ID "{" package+=REQPackage* requirements+=REQRequirement* "}";
		public ParserRule getRule() { return rule; }

		//"package" name=ID "{" package+=REQPackage* requirements+=REQRequirement* "}"
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//package+=REQPackage*
		public Assignment getPackageAssignment_3() { return cPackageAssignment_3; }

		//REQPackage
		public RuleCall getPackageREQPackageParserRuleCall_3_0() { return cPackageREQPackageParserRuleCall_3_0; }

		//requirements+=REQRequirement*
		public Assignment getRequirementsAssignment_4() { return cRequirementsAssignment_4; }

		//REQRequirement
		public RuleCall getRequirementsREQRequirementParserRuleCall_4_0() { return cRequirementsREQRequirementParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class REQRequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "REQRequirement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReqKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTextSTRINGTerminalRuleCall_2_0 = (RuleCall)cTextAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//REQRequirement:
		//	"req" name=ID text=STRING ";";
		public ParserRule getRule() { return rule; }

		//"req" name=ID text=STRING ";"
		public Group getGroup() { return cGroup; }

		//"req"
		public Keyword getReqKeyword_0() { return cReqKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//text=STRING
		public Assignment getTextAssignment_2() { return cTextAssignment_2; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_2_0() { return cTextSTRINGTerminalRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class REQNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "REQNode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cREQPackageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cREQRequirementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//REQNode:
		//	REQPackage | REQRequirement;
		public ParserRule getRule() { return rule; }

		//REQPackage | REQRequirement
		public Alternatives getAlternatives() { return cAlternatives; }

		//REQPackage
		public RuleCall getREQPackageParserRuleCall_0() { return cREQPackageParserRuleCall_0; }

		//REQRequirement
		public RuleCall getREQRequirementParserRuleCall_1() { return cREQRequirementParserRuleCall_1; }
	}
	
	
	private ModelElements pModel;
	private REQPackageElements pREQPackage;
	private REQRequirementElements pREQRequirement;
	private REQNodeElements pREQNode;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public RMLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.lowcoupling.mdpm.lng.rml.RML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	packages+=REQPackage*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//REQPackage:
	//	"package" name=ID "{" package+=REQPackage* requirements+=REQRequirement* "}";
	public REQPackageElements getREQPackageAccess() {
		return (pREQPackage != null) ? pREQPackage : (pREQPackage = new REQPackageElements());
	}
	
	public ParserRule getREQPackageRule() {
		return getREQPackageAccess().getRule();
	}

	//REQRequirement:
	//	"req" name=ID text=STRING ";";
	public REQRequirementElements getREQRequirementAccess() {
		return (pREQRequirement != null) ? pREQRequirement : (pREQRequirement = new REQRequirementElements());
	}
	
	public ParserRule getREQRequirementRule() {
		return getREQRequirementAccess().getRule();
	}

	//REQNode:
	//	REQPackage | REQRequirement;
	public REQNodeElements getREQNodeAccess() {
		return (pREQNode != null) ? pREQNode : (pREQNode = new REQNodeElements());
	}
	
	public ParserRule getREQNodeRule() {
		return getREQNodeAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
