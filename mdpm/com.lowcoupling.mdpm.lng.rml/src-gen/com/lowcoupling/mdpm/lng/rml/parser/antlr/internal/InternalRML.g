/*
* generated by Xtext
*/
grammar InternalRML;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.lowcoupling.mdpm.lng.rml.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.lowcoupling.mdpm.lng.rml.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.lowcoupling.mdpm.lng.rml.services.RMLGrammarAccess;

}

@parser::members {

 	private RMLGrammarAccess grammarAccess;
 	
    public InternalRMLParser(TokenStream input, RMLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected RMLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getPackagesREQPackageParserRuleCall_0()); 
	    }
		lv_packages_0_0=ruleREQPackage		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"packages",
        		lv_packages_0_0, 
        		"REQPackage");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleREQPackage
entryRuleREQPackage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getREQPackageRule()); }
	 iv_ruleREQPackage=ruleREQPackage 
	 { $current=$iv_ruleREQPackage.current; } 
	 EOF 
;

// Rule REQPackage
ruleREQPackage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='package' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getREQPackageAccess().getPackageKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getREQPackageAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getREQPackageRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getREQPackageAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getREQPackageAccess().getPackageREQPackageParserRuleCall_3_0()); 
	    }
		lv_package_3_0=ruleREQPackage		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getREQPackageRule());
	        }
       		add(
       			$current, 
       			"package",
        		lv_package_3_0, 
        		"REQPackage");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getREQPackageAccess().getRequirementsREQRequirementParserRuleCall_4_0()); 
	    }
		lv_requirements_4_0=ruleREQRequirement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getREQPackageRule());
	        }
       		add(
       			$current, 
       			"requirements",
        		lv_requirements_4_0, 
        		"REQRequirement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getREQPackageAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleREQRequirement
entryRuleREQRequirement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getREQRequirementRule()); }
	 iv_ruleREQRequirement=ruleREQRequirement 
	 { $current=$iv_ruleREQRequirement.current; } 
	 EOF 
;

// Rule REQRequirement
ruleREQRequirement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='req' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getREQRequirementAccess().getReqKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getREQRequirementAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getREQRequirementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		lv_text_2_0=RULE_STRING
		{
			newLeafNode(lv_text_2_0, grammarAccess.getREQRequirementAccess().getTextSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getREQRequirementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"text",
        		lv_text_2_0, 
        		"STRING");
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getREQRequirementAccess().getSemicolonKeyword_3());
    }
)
;







RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


