/*
 * generated by Xtext
 */
package com.lowcoupling.mdpm.lng.wbs.scoping;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.naming.DefaultDeclarativeQualifiedNameProvider;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;

import com.lowcoupling.mdpm.lng.wbs.wBS.RequirementImport;
import com.lowcoupling.mdpm.lng.wbs.wBS.WBS;
import com.lowcoupling.mdpm.lng.wbs.wBS.WBSDeliverable;
import com.lowcoupling.mdpm.lng.wbs.wBS.WBSProject;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping
 * on how and when to use it 
 *
 */
public class WBSScopeProvider extends AbstractDeclarativeScopeProvider {

//	public IScope getScope (EObject context, EReference reference) {
//		if(reference.getName().equals("REQNode")){
//			EObject parent = context.eContainer();
//			while ((parent!=null) && !(parent instanceof WBS )){
//				parent = parent.eContainer();
//			}
//			if(parent !=null && (parent instanceof WBS)){
//				WBS project = (WBS)parent;
//				List<RequirementImport> reqImps = project.getRequirementsModel();
//				Iterator<RequirementImport> rit = reqImps.iterator();
//				while(rit.hasNext()){
//					RequirementImport rimp = rit.next();
//					rimp.
//				}
//				Iterator<EObject> nodes = wbsProject.eAllContents();
//				List<EObject> activities = new ArrayList<EObject>();
//				while(nodes.hasNext()){
//					EObject node = nodes.next();
//					if(!(node instanceof WBSDeliverable)){
//						activities.add(node);
//					}
//				}
//				DefaultDeclarativeQualifiedNameProvider nameP = new DefaultDeclarativeQualifiedNameProvider();
//				return  org.eclipse.xtext.scoping.Scopes.scopeFor(activities, nameP, IScope.NULLSCOPE);
//			}
//
//
//		}
//		return super.getScope(context, reference);
//	}
}
